{"version":3,"names":["donutChartCss","DonutChart","data","labels","colors","size","strokeWidth","chartTitle","componentDidLoad","this","handleResize","window","addEventListener","disconnectedCallback","removeEventListener","el","style","width","parseArrayProp","prop","Array","isArray","JSON","parse","split","render","total","reduce","a","b","offset","radius","circumference","Math","PI","_jsxs","class","children","_jsx","height","viewBox","map","value","i","dash","dashArray","circleOffset","cx","cy","r","fill","stroke","transition","l","background","name"],"sources":["src/components/donut-chart/donut-chart.css?tag=animated-donut-chart&encapsulation=shadow","src/components/donut-chart/donut-chart.tsx"],"sourcesContent":[".donut-chart {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n.donut-labels {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin-top: 8px;\r\n  font-size: 12px;\r\n  color: #6b7280;\r\n}\r\n.donut-legend {\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 8px;\r\n}\r\n.donut-dot {\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  margin-right: 4px;\r\n}\r\n.donut-chart-wrapper {\r\n  width: 100%;\r\n}\r\n.chart-title {\r\n  text-align: center;\r\n  font-weight: 600;\r\n  font-size: 1.1rem;\r\n  margin-bottom: 0.5rem;\r\n} ","import { Component, Prop, h, Element } from '@stencil/core';\r\nimport './donut-chart.css';\r\n\r\n@Component({\r\n  tag: 'animated-donut-chart',\r\n  styleUrl: 'donut-chart.css',\r\n  shadow: true,\r\n})\r\nexport class DonutChart {\r\n  @Element() el: HTMLElement;\r\n  @Prop() data: number[] = [];\r\n  @Prop() labels: string[] = [];\r\n  @Prop() colors: string[] = [];\r\n  @Prop() size: number = 120;\r\n  @Prop() strokeWidth: number = 16;\r\n  @Prop() chartTitle?: string;\r\n\r\n  componentDidLoad() {\r\n    this.handleResize();\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n  disconnectedCallback() {\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n  handleResize = () => {\r\n    if (this.el) {\r\n      this.el.style.width = '100%';\r\n    }\r\n  };\r\n\r\n  parseArrayProp(prop: any): any[] {\r\n    if (Array.isArray(prop)) return prop;\r\n    if (typeof prop === 'string') {\r\n      try {\r\n        return JSON.parse(prop);\r\n      } catch {\r\n        return prop.split(',');\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n\r\n  render() {\r\n    const data = this.parseArrayProp(this.data);\r\n    const labels = this.parseArrayProp(this.labels);\r\n    const colors = this.parseArrayProp(this.colors);\r\n    const total = data.reduce((a, b) => a + b, 0) || 1;\r\n    let offset = 0;\r\n    const radius = (this.size - this.strokeWidth) / 2;\r\n    const circumference = 2 * Math.PI * radius;\r\n    return (\r\n      <div class=\"donut-chart-wrapper\">\r\n        {this.chartTitle && <div class=\"chart-title\">{this.chartTitle}</div>}\r\n        <div class=\"donut-chart\">\r\n          <svg width={this.size} height={this.size} viewBox={`0 0 ${this.size} ${this.size}`}>\r\n            {data.map((value, i) => {\r\n              const dash = (value / total) * circumference;\r\n              const dashArray = `${dash} ${circumference - dash}`;\r\n              const circleOffset = offset;\r\n              offset += dash;\r\n              return (\r\n                <circle\r\n                  key={i}\r\n                  cx={this.size / 2}\r\n                  cy={this.size / 2}\r\n                  r={radius}\r\n                  fill=\"none\"\r\n                  stroke={colors[i] || '#3b82f6'}\r\n                  stroke-width={this.strokeWidth}\r\n                  stroke-dasharray={dashArray}\r\n                  stroke-dashoffset={-circleOffset}\r\n                  style={{ transition: 'stroke-dasharray 1s cubic-bezier(0.4,0,0.2,1)' }}\r\n                />\r\n              );\r\n            })}\r\n          </svg>\r\n          <div class=\"donut-labels\">\r\n            {labels.map((l, i) => (\r\n              <span key={i} class=\"donut-legend\">\r\n                <span class=\"donut-dot\" style={{ background: colors[i] || '#3b82f6' }}></span>\r\n                {l}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <slot name=\"tooltip\"></slot>\r\n      </div>\r\n    );\r\n  }\r\n} "],"mappings":"+EAAA,MAAMA,EAAgB,wa,MCQTC,EAAU,M,iDAEbC,KAAiB,GACjBC,OAAmB,GACnBC,OAAmB,GACnBC,KAAe,IACfC,YAAsB,GACtBC,WAER,gBAAAC,GACEC,KAAKC,eACLC,OAAOC,iBAAiB,SAAUH,KAAKC,a,CAEzC,oBAAAG,GACEF,OAAOG,oBAAoB,SAAUL,KAAKC,a,CAE5CA,aAAe,KACb,GAAID,KAAKM,GAAI,CACXN,KAAKM,GAAGC,MAAMC,MAAQ,M,GAI1B,cAAAC,CAAeC,GACb,GAAIC,MAAMC,QAAQF,GAAO,OAAOA,EAChC,UAAWA,IAAS,SAAU,CAC5B,IACE,OAAOG,KAAKC,MAAMJ,E,CAClB,MACA,OAAOA,EAAKK,MAAM,I,EAGtB,MAAO,E,CAGT,MAAAC,GACE,MAAMvB,EAAOO,KAAKS,eAAeT,KAAKP,MACtC,MAAMC,EAASM,KAAKS,eAAeT,KAAKN,QACxC,MAAMC,EAASK,KAAKS,eAAeT,KAAKL,QACxC,MAAMsB,EAAQxB,EAAKyB,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,IAAM,EACjD,IAAIC,EAAS,EACb,MAAMC,GAAUtB,KAAKJ,KAAOI,KAAKH,aAAe,EAChD,MAAM0B,EAAgB,EAAIC,KAAKC,GAAKH,EACpC,OACEI,OAAK,OAAAC,MAAM,sBACRC,SAAA,CAAA5B,KAAKF,YAAc+B,MAAA,OAAKF,MAAM,cAAaC,SAAE5B,KAAKF,YAAU,4CAC7D4B,OAAA,OAAKC,MAAM,cAAaC,SAAA,CACtBC,MAAK,OAAArB,MAAOR,KAAKJ,KAAMkC,OAAQ9B,KAAKJ,KAAMmC,QAAS,OAAO/B,KAAKJ,QAAQI,KAAKJ,OACzEgC,SAAAnC,EAAKuC,KAAI,CAACC,EAAOC,KAChB,MAAMC,EAAQF,EAAQhB,EAASM,EAC/B,MAAMa,EAAY,GAAGD,KAAQZ,EAAgBY,IAC7C,MAAME,EAAehB,EACrBA,GAAUc,EACV,OACEN,MAEE,UAAAS,GAAItC,KAAKJ,KAAO,EAChB2C,GAAIvC,KAAKJ,KAAO,EAChB4C,EAAGlB,EACHmB,KAAK,OACLC,OAAQ/C,EAAOuC,IAAM,UACP,eAAAlC,KAAKH,YACD,mBAAAuC,EACC,qBAACC,EACpB9B,MAAO,CAAEoC,WAAY,kDAThBT,EAUL,KAEJ,4CAEJL,MAAA,OAAKF,MAAM,eAAcC,SACtBlC,EAAOsC,KAAI,CAACY,EAAGV,IACdR,OAAc,QAAAC,MAAM,eAClBC,SAAA,CAAAC,MAAA,QAAMF,MAAM,YAAYpB,MAAO,CAAEsC,WAAYlD,EAAOuC,IAAM,aACzDU,IAFQV,MAKT,0FAERL,MAAA,QAAMiB,KAAK,WAAS,8CAChB,2C","ignoreList":[]}